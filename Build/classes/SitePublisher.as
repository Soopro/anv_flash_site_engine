package {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Loader;	import flash.events.*;	import flash.geom.Rectangle;	import flash.text.*;	import flash.net.*;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.StageQuality;	import flash.system.System;	import flash.system.Capabilities;	import flash.display.LoaderInfo;	import net.*;	import tools.*;	import views.*;	import loader.*;	public class SitePublisher extends MovieClip {		//object preplace		private var generalData:XMLData=new XMLData;		private var conifgData:XMLData=new XMLData;		private var baseDatas:Array=new Array;		private var baseDataState:Array=new Array;		private var contentsData:Array=new Array;		private var contentsDataState:Array=new Array;		private var error:ConnectionError=new ConnectionError;		private var mloader:MultiLoader=new MultiLoader;		private var loader_ui:SiteLoaderUI=new SiteLoaderUI;		private var mainsite:MovieClip=new MovieClip;		private var bg:Sprite=new Sprite();		private var cover:Sprite=new Sprite();		//variable preplace		private var errorCheck:Boolean=false;		private var lang:String="en";		public function SitePublisher() {			this.mouseEnabled=false;			stage.scaleMode=StageScaleMode.NO_SCALE;			//stage.quality=StageQuality.LOW			stage.showDefaultContextMenu=false;			//Security.loadPolicyFile("http://www.namabi.com/security/crossdomain.xml");			//Security.allowDomain("namabi.com") 			var paramObj:Object = LoaderInfo(root.loaderInfo).parameters;			if (paramObj.lang!=undefined) {				lang=paramObj.lang;			}			if (paramObj.opera=="true") {				Site.Opera=paramObj.opera;			} else {				Site.Opera=false;			}			Site.langCode=lang;			setBackground(true);			//TestReport.setup(this,450,580);			//TestReport.setNote(Site.Opera.toString());			Align.setup(Site.WIDTH,Site.HEIGHT);			baseDatas=[generalData,conifgData];			baseDataState=["loading","loading"];			generalData.loadXML(Site.langCode+"/"+"general.xml");			generalData.addEventListener(XMLData.XML_COMPLETE,checkBaseData);			generalData.addEventListener(XMLData.XML_ERROR,errorHandler);			conifgData.loadXML(Site.langCode+"/"+"config.xml");			conifgData.addEventListener(XMLData.XML_COMPLETE,checkBaseData);			conifgData.addEventListener(XMLData.XML_ERROR,errorHandler);			stage.addEventListener(Event.RESIZE,resizeHandler);			this.addEventListener(Event.REMOVED,removed);		}		private function setBackground(chk:Boolean=false):void {			bg.mouseChildren=false;			cover.mouseChildren=false;			if (chk) {				addChild(bg);				addChild(cover);			} else {				removeChildren(bg);				removeChildren(cover);			}			var scHeight=768;			if (stage!=null) {				var s_w:int=Site.WIDTH;				var s_h:int=Site.HEIGHT;				var s_x:int=0;				var s_y:int=0;				if (stage.stageHeight>Site.HEIGHT) {					s_h=stage.stageHeight;					s_y=Math.ceil((Site.HEIGHT-s_h)/2);				}				var numCover=Math.ceil(s_h/scHeight);//24 is how much heigh of cover item				var pagebg:SiteBg=new SiteBg(s_w,s_h,s_x,s_y);				bg.addChild(pagebg);				//set side cover bg				for (var j:int=0; j<numCover; j++) {					var leftbg:SideCoverBg=new SideCoverBg(false,4,s_y+j*scHeight);					var rightbg:SideCoverBg=new SideCoverBg(true,1676,s_y+j*scHeight);					bg.addChild(leftbg);					bg.addChild(rightbg);				}				for (var i:int=0; i<numCover; i++) {					var leftitem:SideCover=new SideCover(false,4,s_y+i*scHeight);					var rightitem:SideCover=new SideCover(true,1676,s_y+i*scHeight);					cover.addChild(leftitem);					cover.addChild(rightitem);				}			}		}		private function resizeHandler(event:Event):void {			setBackground();		}		private function checkBaseData(event:Event):void {			event.target.removeEventListener(XMLData.XML_COMPLETE,checkBaseData);			event.target.removeEventListener(XMLData.XML_ERROR,errorHandler);			for (var i:int=0; i < baseDatas.length; i++) {				if (baseDatas[i] == event.target) {					baseDataState[i]="loaded";					break;				}			}			var loaded:Boolean=true;			for each (var s:String in baseDataState) {				if (s != "loaded") {					loaded=false;				}			}			if (loaded) {				setConfig();				loadContentsXML();			}		}		private function loadContentsXML():void {			var xmls:XMLList=generalData.getData.contents.xml;			for (var i:int; i < xmls.length(); i++) {				contentsData[i]=new XMLData  ;				contentsData[i].loadXML(Site.langCode+"/"+xmls[i].@src);				contentsData[i].addEventListener(XMLData.XML_COMPLETE,checkContentsData);				contentsData[i].addEventListener(XMLData.XML_ERROR,errorHandler);				contentsDataState[i]="loading";			}		}		private function checkContentsData(event:Event):void {			event.target.removeEventListener(XMLData.XML_COMPLETE,checkContentsData);			event.target.removeEventListener(XMLData.XML_ERROR,errorHandler);			for (var i:int=0; i < contentsData.length; i++) {				if (contentsData[i] == event.target) {					contentsDataState[i]="loaded";					break;				}			}			var loaded:Boolean=true;			for each (var s:String in contentsDataState) {				if (s != "loaded") {					loaded=false;				}			}			if (loaded) {				loadSite();			}		}		private function errorHandler(event:Event):void {			event.target.removeEventListener(XMLData.XML_COMPLETE,checkContentsData);			event.target.removeEventListener(XMLData.XML_ERROR,errorHandler);			if (event.target == mloader) {				mloader.removeEventListener(MultiLoader.LOAD_COMPLETE,completeHandler);				mloader.removeEventListener(MultiLoader.ON_ERROR,errorHandler);				mloader.removeEventListener(MultiLoader.ON_PROGRESS,loadingHandler);			}			addChild(error);			Align.center(error);			if (this.contains(loader_ui)) {				removeChild(loader_ui);			}			errorCheck=true;		}		private function loadSite():void {			mloader.load("_fonts.swf","_module.swf","main.swf");			mloader.addEventListener(MultiLoader.LOAD_COMPLETE,completeHandler);			mloader.addEventListener(MultiLoader.ON_ERROR,errorHandler);			mloader.addEventListener(MultiLoader.ON_PROGRESS,loadingHandler);			addChild(loader_ui);			loader_ui.startLoading();			Align.center(loader_ui,null,loader_ui.width/2,0);		}		private function loadingHandler(event:Event):void {			loader_ui.setPercent(mloader.getPercent);		}		private function completeHandler(event:Event):void {			mloader.removeEventListener(MultiLoader.LOAD_COMPLETE,completeHandler);			mloader.removeEventListener(MultiLoader.ON_ERROR,errorHandler);			mloader.removeEventListener(MultiLoader.ON_PROGRESS,loadingHandler);			if (! errorCheck) {				Site.module=mloader.getContent("_module.swf");				mainsite=mloader.getContent("main.swf");				loader_ui.addEventListener(Site.OUT_COMPLETE,siteHandler);				loader_ui.setComplete();			}		}		private function siteHandler(event:Event):void {			loader_ui.removeEventListener(Site.OUT_COMPLETE,siteHandler);			addChild(mainsite);			swapChildren(cover,mainsite);			var tmp_datas:Array=new Array;			for (var i:int=0; i < contentsData.length; i++) {				tmp_datas[i]=contentsData[i].getData.contents[0];			}			mainsite.setup(generalData.getData,tmp_datas);		}		private function setConfig():void {			TextStyle.setup(conifgData.getData.text[0]);			SiteStyle.setup(conifgData.getData.display[0]);		}		private function removeChildren(target:Object):void {			for (var i:int=target.numChildren - 1; i >= 0; i--) {				target.removeChildAt(0);			}		}		private function removed(event:Event):void {			if (event.target == this) {				this.removeEventListener(Event.REMOVED,removed);				mloader.removeEventListener(MultiLoader.LOAD_COMPLETE,completeHandler);				mloader.removeEventListener(MultiLoader.ON_ERROR,errorHandler);				mloader.removeEventListener(MultiLoader.ON_PROGRESS,loadingHandler);				generalData.removeEventListener(XMLData.XML_COMPLETE,checkContentsData);				generalData.removeEventListener(XMLData.XML_ERROR,errorHandler);				conifgData.removeEventListener(XMLData.XML_COMPLETE,checkContentsData);				conifgData.removeEventListener(XMLData.XML_ERROR,errorHandler);				for each (var xmldata:XMLData in contentsData) {					xmldata.removeEventListener(XMLData.XML_COMPLETE,checkContentsData);					xmldata.removeEventListener(XMLData.XML_ERROR,errorHandler);				}				loader_ui.removeEventListener(Site.OUT_COMPLETE,siteHandler);				stage.removeEventListener(Event.RESIZE,resizeHandler);				contentsData=[];				baseDatas=[];				contentsDataState=[];				baseDataState=[];				errorCheck=false;				removeChildren(this);				mloader=new MultiLoader  ;				mainsite=new MovieClip  ;			}		}	}}